name: windows-build-test

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: ilammy/msvc-dev-cmd@v1

    - uses: actions/checkout@v3
      with:
        #repository: openzfsonwindows/openzfs
        fetch-depth: 0

    - name: debug - git status
      run: git status

    #https://stackoverflow.com/a/60883893
    #  "C:\Program Files\Git\bin\git.exe" -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +90acd8f20e6d0c14b83241cc7dcd17df27d5a95b:refs/remotes/origin/andrew_workflows-7
    #- name: checkout again
    #  run: git fetch --prune --unshallow


    - name: Import signing certificate
      run: |
        $plaintextpwd = 'password1234'
        $pwd = ConvertTo-SecureString -String $plaintextpwd -Force -AsPlainText
        Import-PfxCertificate -FilePath ${{github.workspace}}/contrib/windows/TestCert/test_sign_cert_pass.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pwd -Exportable

    #- name: Remove provided ssl
    #  run:  Remove-Item -Path "C:\Strawberry\" -Recurse -Force

    #- name: Install openssl
    #  run: git clone https://github.com/andrewc12/openssl.git

    - name: Checkout openssl
      uses: actions/checkout@v3
      with:
        repository: andrewc12/openssl # optional, default is ${{ github.repository }}
        path: openssl # optional

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G "Ninja" -B ${{github.workspace}}/out/build/x64-Debug ${{github.workspace}}  -DOPENSSL_ROOT_DIR=${{github.workspace}}/openssl/ -DCRYPTO_STATIC_TEST=${{github.workspace}}/openssl/lib/VC/static/libcrypto64MTd.lib -DLIB_EAY_DEBUG=${{github.workspace}}/openssl/lib/VC/static/libcrypto64MTd.lib -DLIB_EAY_RELEASE=${{github.workspace}}/openssl/lib/VC/static/libcrypto64MT.lib -DOPENSSL_INCLUDE_DIR=${{github.workspace}}/openssl/include -DSSL_EAY_DEBUG=${{github.workspace}}/openssl/lib/VC/static/libssl64MTd.lib -DSSL_EAY_RELEASE=${{github.workspace}}/openssl/lib/VC/static/libssl64MT.lib

    - name: Build
      working-directory: ${{github.workspace}}/out/build/x64-Debug
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/out/build/x64-Debug

    - name: debug - get git rev
      run: git describe --always --long --dirty

    - name: Download Inno Setup istaller
      uses: suisei-cn/actions-download-file@v1.0.1
      id: innoinstaller
      with:
        url: 'https://jrsoftware.org/download.php/is.exe'
        target: ${{github.workspace}}/

    - name: debug - echo filename
      run: echo ${{ steps.innoinstaller.outputs.filename }}

    - name: debug - list
      run: ls ${{github.workspace}}\

    - name: debug - list
      run: ls ${{github.workspace}}\${{ steps.innoinstaller.outputs.filename }}

    - name: install inno
      run: 'Start-Process -FilePath "${{github.workspace}}\${{ steps.innoinstaller.outputs.filename }}" -Wait -ArgumentList "/NORESTART /ALLUSERS /VERYSILENT /LOG=`"${{github.workspace}}\InnoSetup-Install.log`""'

    #- name: Wait for install to finish
    #  run: Start-Sleep -Seconds 30
    #  uses: iFaxity/wait-on-action@v1
    #  with:
    #    resource: 'C:\Program Files\OpenZFS On Windows\zpool.exe'

    - name: debug - print log
      run: cat "${{github.workspace}}\InnoSetup-Install.log"

    - name: run ISCC.exe to construct OpenZFS installer
      run: '&"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" .\ZFSInstall-debug.iss | Tee-Object -FilePath "${{github.workspace}}\iscc.log"'
      working-directory: ${{github.workspace}}\contrib\windows\Inno.Setup

    #- name: debug - get exe name
    # https://stackoverflow.com/questions/4426442/unix-tail-equivalent-command-in-windows-powershell
    #  run: Get-Content "${{github.workspace}}\iscc.log" -Tail 1

    - name: get installer exe name
      id: innoout
    # https://stackoverflow.com/questions/4426442/unix-tail-equivalent-command-in-windows-powershell
      run: |
        $p = Get-Content "${{github.workspace}}\iscc.log" -Tail 1
        echo $p
        $f = (Get-Item $p ).Name
        echo $f
        echo "::set-output name=name::$($f)"

    - name: debug - echo
      run: echo ${{ steps.innoout.outputs.name }}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: build_output
        path: ${{github.workspace}}/out

    - name: Collect dev build
      run: |
        mkdir ${{github.workspace}}/zfs_collect
        copy ${{github.workspace}}/out/build/x64-Debug/module/os/windows/driver/* ${{github.workspace}}/zfs_collect
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/os/windows/kstat/kstat.exe ${{github.workspace}}/zfs_collect/kstat.exe
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/os/windows/zfsinstaller/zfsinstaller.exe ${{github.workspace}}/zfs_collect/zfsinstaller.exe
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/zdb/zdb.exe ${{github.workspace}}/zfs_collect/zdb.exe
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/zfs/zfs.exe ${{github.workspace}}/zfs_collect/zfs.exe
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/zpool/zpool.exe ${{github.workspace}}/zfs_collect/zpool.exe
        copy ${{github.workspace}}/out/build/x64-Debug/cmd/zstream/zstreamdump.exe ${{github.workspace}}/zfs_collect/zstreamdump.exe

    - name: Upload dev build
      uses: actions/upload-artifact@v3.1.0
      with:
        name: dev_build
        path: ${{github.workspace}}/zfs_collect/*

    - name: Upload dev build with Inno Setup
      uses: actions/upload-artifact@v3.1.0
      with:
        name: dev_build_inno
        path: ${{github.workspace}}\contrib\windows\${{ steps.innoout.outputs.name }}





    # https://github.com/MicrosoftDocs/windows-powershell-docs/issues/266
    - name: Import root certificate
      run: |
        $plaintextpwd = 'password1234'
        $pwd = ConvertTo-SecureString -String $plaintextpwd -Force -AsPlainText
        Import-PfxCertificate -FilePath ${{github.workspace}}/contrib/windows/TestCert/test_sign_cert_pass.pfx -CertStoreLocation Cert:\LocalMachine\Root -Password $pwd
        Import-PfxCertificate -FilePath ${{github.workspace}}/contrib/windows/TestCert/test_sign_cert_pass.pfx -CertStoreLocation Cert:\LocalMachine\TrustedPublisher -Password $pwd

    - name: install zfs
      run: 'Start-Process -FilePath "${{github.workspace}}\contrib\windows\${{ steps.innoout.outputs.name }}" -Wait -ArgumentList "/NORESTART /ALLUSERS /VERYSILENT /LOG=`"${{github.workspace}}\InnoSetup-Install.log`""'

    #- name: Wait for install to finish
    #  run: Start-Sleep -Seconds 30
    #  uses: iFaxity/wait-on-action@v1
    #  with:
    #    resource: 'C:\Program Files\OpenZFS On Windows\zpool.exe'

    - name: debug - print log
      run: cat "${{github.workspace}}\InnoSetup-Install.log"
